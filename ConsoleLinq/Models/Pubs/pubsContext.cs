// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ConsoleLinq.Models.Pubs;

public partial class pubsContext : DbContext
{
    public pubsContext()
    {
    }

    public pubsContext(DbContextOptions<pubsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<author> authors { get; set; }

    public virtual DbSet<discount> discounts { get; set; }

    public virtual DbSet<employee> employees { get; set; }

    public virtual DbSet<job> jobs { get; set; }

    public virtual DbSet<pub_info> pub_infos { get; set; }

    public virtual DbSet<publisher> publishers { get; set; }

    public virtual DbSet<roysched> royscheds { get; set; }

    public virtual DbSet<sale> sales { get; set; }

    public virtual DbSet<store> stores { get; set; }

    public virtual DbSet<title> titles { get; set; }

    public virtual DbSet<titleauthor> titleauthors { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    { 
    #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        optionsBuilder.UseSqlServer("Data Source=SSTPX13G4;Initial Catalog=pubs;Integrated Security=True; Encrypt=False");

        // 出力ウィンドウに EF Core ログを表示
        optionsBuilder.LogTo(msg => System.Diagnostics.Debug.WriteLine(msg));
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<author>(entity =>
        {
            entity.HasKey(e => e.au_id).HasName("UPKCL_auidind");

            entity.HasIndex(e => new { e.au_lname, e.au_fname }, "aunmind");

            entity.Property(e => e.au_id)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.address)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.au_fname)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.au_lname)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.city)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.phone)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("UNKNOWN")
                .IsFixedLength();
            entity.Property(e => e.state)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.zip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<discount>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.discount1)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("discount");
            entity.Property(e => e.discounttype)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.stor_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.stor).WithMany()
                .HasForeignKey(d => d.stor_id)
                .HasConstraintName("FK__discounts__stor___4F7CD00D");
        });

        modelBuilder.Entity<employee>(entity =>
        {
            entity.HasKey(e => e.emp_id)
                .HasName("PK_emp_id")
                .IsClustered(false);

            entity.ToTable("employee", tb => tb.HasTrigger("employee_insupd"));

            entity.HasIndex(e => new { e.lname, e.fname, e.minit }, "employee_ind").IsClustered();

            entity.Property(e => e.emp_id)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fname)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.hire_date)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.job_id).HasDefaultValue((short)1);
            entity.Property(e => e.job_lvl).HasDefaultValue((byte)10);
            entity.Property(e => e.lname)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.minit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.pub_id)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("9952")
                .IsFixedLength();

            entity.HasOne(d => d.job).WithMany(p => p.employees)
                .HasForeignKey(d => d.job_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__employee__job_id__5BE2A6F2");

            entity.HasOne(d => d.pub).WithMany(p => p.employees)
                .HasForeignKey(d => d.pub_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__employee__pub_id__5EBF139D");
        });

        modelBuilder.Entity<job>(entity =>
        {
            entity.HasKey(e => e.job_id).HasName("PK__jobs__6E32B6A5D2BEC8A0");

            entity.Property(e => e.job_desc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("New Position - title not formalized yet");
        });

        modelBuilder.Entity<pub_info>(entity =>
        {
            entity.HasKey(e => e.pub_id).HasName("UPKCL_pubinfo");

            entity.ToTable("pub_info");

            entity.Property(e => e.pub_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.logo).HasColumnType("image");
            entity.Property(e => e.pr_info).HasColumnType("text");

            entity.HasOne(d => d.pub).WithOne(p => p.pub_info)
                .HasForeignKey<pub_info>(d => d.pub_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__pub_info__pub_id__571DF1D5");
        });

        modelBuilder.Entity<publisher>(entity =>
        {
            entity.HasKey(e => e.pub_id).HasName("UPKCL_pubind");

            entity.Property(e => e.pub_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.city)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.country)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("USA");
            entity.Property(e => e.pub_name)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.state)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<roysched>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("roysched");

            entity.HasIndex(e => e.title_id, "titleidind");

            entity.Property(e => e.title_id)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.HasOne(d => d.title).WithMany()
                .HasForeignKey(d => d.title_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__roysched__title___4D94879B");
        });

        modelBuilder.Entity<sale>(entity =>
        {
            entity.HasKey(e => new { e.stor_id, e.ord_num, e.title_id }).HasName("UPKCL_sales");

            entity.HasIndex(e => e.title_id, "titleidind");

            entity.Property(e => e.stor_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ord_num)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.title_id)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ord_date).HasColumnType("datetime");
            entity.Property(e => e.payterms)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);

            entity.HasOne(d => d.stor).WithMany(p => p.sales)
                .HasForeignKey(d => d.stor_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sales__stor_id__4AB81AF0");

            entity.HasOne(d => d.title).WithMany(p => p.sales)
                .HasForeignKey(d => d.title_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__sales__title_id__4BAC3F29");
        });

        modelBuilder.Entity<store>(entity =>
        {
            entity.HasKey(e => e.stor_id).HasName("UPK_storeid");

            entity.Property(e => e.stor_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.city)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.state)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.stor_address)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.stor_name)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.zip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<title>(entity =>
        {
            entity.HasKey(e => e.title_id).HasName("UPKCL_titleidind");

            entity.HasIndex(e => e.title1, "titleind");

            entity.Property(e => e.title_id)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.advance).HasColumnType("money");
            entity.Property(e => e.notes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.price).HasColumnType("money");
            entity.Property(e => e.pub_id)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.pubdate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.title1)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.type)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("UNDECIDED")
                .IsFixedLength();

            entity.HasOne(d => d.pub).WithMany(p => p.titles)
                .HasForeignKey(d => d.pub_id)
                .HasConstraintName("FK__titles__pub_id__412EB0B6");
        });

        modelBuilder.Entity<titleauthor>(entity =>
        {
            entity.HasKey(e => new { e.au_id, e.title_id }).HasName("UPKCL_taind");

            entity.ToTable("titleauthor");

            entity.HasIndex(e => e.au_id, "auidind");

            entity.HasIndex(e => e.title_id, "titleidind");

            entity.Property(e => e.au_id)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.title_id)
                .HasMaxLength(6)
                .IsUnicode(false);

            entity.HasOne(d => d.au).WithMany(p => p.titleauthors)
                .HasForeignKey(d => d.au_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__titleauth__au_id__44FF419A");

            entity.HasOne(d => d.title).WithMany(p => p.titleauthors)
                .HasForeignKey(d => d.title_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__titleauth__title__45F365D3");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}